# -*- coding: utf-8 -*-
"""HeartFailure_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/165qV19iSq25RDLKfvxK89KTX3Y_Ao0sz

Import Required Libraries
"""

import pandas as pd
import numpy as np
from sklearn import preprocessing
from scipy import stats
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score, roc_auc_score
import matplotlib.pyplot as plt
import pickle

"""LOAD DATASET"""

data_0 = pd.read_excel('data/Heart Failure Clinical Records.xlsx')
data_0.head()

"""# Explore Dataset"""

data_0.shape

data_0.info()

"""# Remove Outliers"""

data_0.describe()

data_0.corr()

plt.boxplot([data_0['creatinine_phosphokinase']])
plt.show()

from collections import Counter
print(Counter(data_0["DEATH_EVENT"]))

"""# Split Dataset into training and test dataset"""

feature_cols = ['age', 'anaemia', 'creatinine_phosphokinase', 'diabetes',
                'ejection_fraction', 'high_blood_pressure', 'platelets',
               'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']
X = data_0[feature_cols]
y = data_0['DEATH_EVENT']

from imblearn.over_sampling import RandomOverSampler
oversample = RandomOverSampler(sampling_strategy='minority')
# fit and apply the transform
X_over, y_over = oversample.fit_resample(X, y)
# summarize class distribution
print(Counter(y_over))

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

"""# Standardise the Input Data"""

scaler = StandardScaler()
scaler.fit(X)

X_train = scaler.transform(X_train)
X_test = scaler.transform(X_test)
print(X_test)

"""# Model Training"""

model_LR = LogisticRegression()
model_LR.fit(X_train, y_train)

"""# Model Evaluation"""

predicted = model_LR.predict(X_test)

"""# Perfomance Evaluation"""

# Model Accuracy, how often is the classifier correct?
accuracy = metrics.accuracy_score(predicted, y_test)
print('Accuracy: %.3f' % (accuracy*100))

cnf_LR_matrix = metrics.confusion_matrix(predicted, y_test)
print("Confusion_matrix:",cnf_LR_matrix)

print('Precision: %.3f' % precision_score(predicted, y_test))

print('Recall: %.3f' % recall_score(predicted, y_test))

print('F1 Score: %.3f' % f1_score(predicted, y_test))

print('ROC/AUC1 Score: %.3f' % roc_auc_score(predicted, y_test))

# Saving model to disk
pickle.dump(model_LR, open('modelHF.pkl','wb'))
pickle.dump(scaler, open('scaler.pkl','wb'))

# Loading model to compare the results
modelHF = pickle.load(open('modelHF.pkl','rb'))
input_val = scaler.transform([[75, 0, 582, 0, 20, 1, 265000, 1.9, 130, 1, 0, 4]])
print(modelHF.predict(input_val))